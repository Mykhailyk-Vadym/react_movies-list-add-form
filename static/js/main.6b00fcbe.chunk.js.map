{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","handleFormSubmit","prevCount","isReadyToSubmit","onSubmit","preventDefault","newTitle","replace","newDescription","newimgUrl","newImdbUrl","newImdbId","disabled","App","moviesFromServer","setMovies","addMovie","useCallback","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"mSAQaA,EAA6BC,gBAAK,gBAAGC,EAAK,EAALA,MAAK,OACrD,sBAAKC,UAAU,OAAO,UAAQ,aAAY,UACxC,qBAAKA,UAAU,aAAY,SACzB,wBAAQA,UAAU,gBAAe,SAC/B,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAc,UAC3B,sBAAKA,UAAU,QAAO,UACpB,qBAAKA,UAAU,aAAY,SACzB,wBAAQA,UAAU,iBAAgB,SAChC,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAe,SAC5B,mBAAGA,UAAU,aAAY,SAAED,EAAMK,aAIrC,sBAAKJ,UAAU,UAAS,UACrBD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAQ,SAAC,iBAGxB,IC7BKC,EAA8BV,gBAAK,gBAAGW,EAAM,EAANA,OAAM,OACvD,qBAAKT,UAAU,SAAQ,SACpBS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAS,CAERA,MAAOA,GADFA,EAAMY,OAEX,KAEA,I,gBCHD,IAAMC,EAA6Bd,gBAAK,YAMxC,IALLe,EAAI,EAAJA,KACAC,EAAK,EAALA,MAAM,EAAD,EACLC,aAAK,MAAGF,EAAI,MACZG,gBAAQ,OAAQ,MAChBC,gBAAQ,MAAG,WAAO,EAAC,EAGnB,EAAaC,oBAAS,2BAASL,EAAI,YAX5BM,KAAKC,SAASC,WAAWC,MAAM,GAWkB,IAAjDC,EAAoD,iBAAlD,GAGT,EAA6BL,oBAAS,GAAM,mBAArCM,EAAO,KAAEC,EAAS,KACnBC,EAAWF,GAAWR,IAAaF,EAEzC,OACE,sBAAKd,UAAU,QAAO,UACpB,uBAAOA,UAAU,QAAQ2B,QAASJ,EAAG,SAClCR,IAGH,qBAAKf,UAAU,UAAS,SACtB,uBACEuB,GAAIA,EACJ,0BAAkBV,GAClBb,UAAW4B,IAAW,QAAS,CAC7B,YAAaF,IAEfG,KAAK,OACLC,YAAW,gBAAWf,GACtBD,MAAOA,EACPG,SAAU,SAAAc,GAAK,OAAId,EAASc,EAAMC,OAAOlB,MAAM,EAC/CmB,OAAQ,kBAAMR,GAAU,EAAK,MAIhCC,GACC,mBAAG1B,UAAU,iBAAgB,mBAAKe,EAAK,oBAI/C,IC/CamB,EAA4BpC,gBAAK,YAAgB,IAAbqC,EAAK,EAALA,MAC/C,EAA0BjB,mBAAS,GAAE,mBAA9BkB,EAAK,KAAEC,EAAQ,KACtB,EAA0BnB,mBAAS,IAAG,mBAA/Bd,EAAK,KAAEkC,EAAQ,KACtB,EAAsCpB,mBAAS,IAAG,mBAA3Cb,EAAW,KAAEkC,EAAc,KAClC,EAA4BrB,mBAAS,IAAG,mBAAjChB,EAAM,KAAEsC,EAAS,KACxB,EAA8BtB,mBAAS,IAAG,mBAAnCX,EAAO,KAAEkC,EAAU,KAC1B,EAA4BvB,mBAAS,IAAG,mBAAjCP,EAAM,KAAE+B,EAAS,KA4DlBC,EAAmB,WACvBR,EACE,CACE/B,QACAC,cACAH,SACAK,UACAI,WAdJ2B,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,IAgBVL,GAAS,SAAAO,GAAS,OAAIA,EAAY,CAAC,GACrC,EAEMC,EAAkBzC,GACnBO,GACAJ,GACAL,EAEL,OACE,uBACEF,UAAU,WAEV8C,SAAU,SAACf,GACTA,EAAMgB,iBACNJ,GACF,EAAE,UAEF,oBAAI3C,UAAU,QAAO,SAAC,gBAEtB,cAACY,EAAS,CACRC,KAAK,QACLE,MAAM,QACND,MAAOV,EACPa,SA9Fc,SAACH,GAGnB,IAFA,IAAIkC,EAAWlC,EAEiB,MAAzBkC,EAAS1B,MAAM,EAAG,IACvB0B,EAAWA,EAAS1B,MAAM,GAAG2B,QAAQ,MAAO,IAG9CX,EAASU,EACX,EAuFMhC,UAAQ,IAGV,cAACJ,EAAS,CACRC,KAAK,cACLE,MAAM,cACND,MAAOT,EACPY,SA5FoB,SAACH,GAGzB,IAFA,IAAIoC,EAAiBpC,EAEiB,MAA/BoC,EAAe5B,MAAM,EAAG,IAC7B4B,EAAiBA,EAAe5B,MAAM,GAAG2B,QAAQ,MAAO,IAG1DV,EAAeW,EACjB,IAuFI,cAACtC,EAAS,CACRC,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPe,SAzFe,SAACH,GAGpB,IAFA,IAAIqC,EAAYrC,EAEiB,MAA1BqC,EAAU7B,MAAM,EAAG,IACxB6B,EAAYA,EAAU7B,MAAM,GAAG2B,QAAQ,MAAO,IAGhDT,EAAUW,EACZ,EAkFMnC,UAAQ,IAGV,cAACJ,EAAS,CACRC,KAAK,UACLE,MAAM,WACND,MAAOP,EACPU,SAvFgB,SAACH,GAGrB,IAFA,IAAIsC,EAAatC,EAEiB,MAA3BsC,EAAW9B,MAAM,EAAG,IACzB8B,EAAaA,EAAW9B,MAAM,GAAG2B,QAAQ,MAAO,IAGlDR,EAAWW,EACb,EAgFMpC,UAAQ,IAGV,cAACJ,EAAS,CACRC,KAAK,SACLE,MAAM,UACND,MAAOH,EACPM,SArFe,SAACH,GAGpB,IAFA,IAAIuC,EAAYvC,EAEiB,MAA1BuC,EAAU/B,MAAM,EAAG,IACxB+B,EAAYA,EAAU/B,MAAM,GAAG2B,QAAQ,MAAO,IAGhDP,EAAUW,EACZ,EA8EMrC,UAAQ,IAGV,qBAAKhB,UAAU,mBAAkB,SAC/B,qBAAKA,UAAU,UAAS,SACtB,wBACE6B,KAAK,SACL,UAAQ,gBACR7B,UAAU,iBACVsD,UAAWT,EAAgB,SAC5B,cAtDAT,EA6DX,I,OCxJamB,EAAM,WACjB,MAA4BrC,mBAASsC,GAAiB,mBAA/C/C,EAAM,KAAEgD,EAAS,KAElBC,EAAWC,uBAAY,SAACC,GAAe,OAC3CH,GAAU,SAAAI,GAAU,4BAAQA,GAAU,CAAED,GAAQ,GAAE,GACjD,IAEH,OACE,sBAAK5D,UAAU,OAAM,UACnB,qBAAKA,UAAU,eAAc,SAC3B,cAAC,EAAU,CAACS,OAAQA,MAEtB,qBAAKT,UAAU,UAAS,SACtB,cAACkC,EAAQ,CAACC,MAAOuB,QAIzB,ECpBAI,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,Q","file":"static/js/main.6b00fcbe.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n));\n","import React, { memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import classNames from 'classnames';\nimport React, { useState, memo } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = memo(({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n});\n","import { useState, memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = memo(({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const changeTitle = (value: string) => {\n    let newTitle = value;\n\n    while (newTitle.slice(0, 1) === ' ') {\n      newTitle = newTitle.slice(1).replace(/\\s/g, '');\n    }\n\n    setTitle(newTitle);\n  };\n\n  const changeDescription = (value: string) => {\n    let newDescription = value;\n\n    while (newDescription.slice(0, 1) === ' ') {\n      newDescription = newDescription.slice(1).replace(/\\s/g, '');\n    }\n\n    setDescription(newDescription);\n  };\n\n  const changeImgUrl = (value: string) => {\n    let newimgUrl = value;\n\n    while (newimgUrl.slice(0, 1) === ' ') {\n      newimgUrl = newimgUrl.slice(1).replace(/\\s/g, '');\n    }\n\n    setImgUrl(newimgUrl);\n  };\n\n  const changeImdbUrl = (value: string) => {\n    let newImdbUrl = value;\n\n    while (newImdbUrl.slice(0, 1) === ' ') {\n      newImdbUrl = newImdbUrl.slice(1).replace(/\\s/g, '');\n    }\n\n    setImdbUrl(newImdbUrl);\n  };\n\n  const changeImdbId = (value: string) => {\n    let newImdbId = value;\n\n    while (newImdbId.slice(0, 1) === ' ') {\n      newImdbId = newImdbId.slice(1).replace(/\\s/g, '');\n    }\n\n    setImdbId(newImdbId);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleFormSubmit = () => {\n    onAdd(\n      {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      },\n    );\n\n    resetForm();\n\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const isReadyToSubmit = title\n    && imdbId\n    && imdbUrl\n    && imgUrl;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n        handleFormSubmit();\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={changeTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={changeDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={changeImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={changeImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={changeImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isReadyToSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import './App.scss';\nimport { useState, useCallback } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = useCallback((newMovie: Movie) => (\n    setMovies(prevMovies => [...prevMovies, newMovie])\n  ), []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}